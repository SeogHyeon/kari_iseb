#include <iostream>
#include <fstream>
#include <algorithm> // std::copy
#include <vector>
#include "library/RSCodec/CReedSolomon.h"

using namespace std;


unsigned char* read_cadu(string file_path, int& _size) {
	ifstream read_file(file_path, ifstream::binary);
	if (read_file.is_open()) {
		read_file.seekg(0, ios::end);
		long file_size = read_file.tellg();
		_size = file_size;

		read_file.seekg(0, ios::beg);

		unsigned char* buffer = new unsigned char[file_size];
		read_file.read((char*)buffer, file_size);

        read_file.close();

		return buffer;
	}
    else{
        cout<<"cadu read error!"<<endl;
        return NULL;
    }
}

void derandomization(unsigned char* buffer, long size){
    unsigned char pn[255] = {
    0xff, 0x48, 0x0e, 0xc0, 0x9a, 0x0d, 0x70, 0xbc,
    0x8e, 0x2c, 0x93, 0xad, 0xa7, 0xb7, 0x46, 0xce,
    0x5a, 0x97, 0x7d, 0xcc, 0x32, 0xa2, 0xbf, 0x3e,
    0x0a, 0x10, 0xf1, 0x88, 0x94, 0xcd, 0xea, 0xb1,
    0xfe, 0x90, 0x1d, 0x81, 0x34, 0x1a, 0xe1, 0x79,
    0x1c, 0x59, 0x27, 0x5b, 0x4f, 0x6e, 0x8d, 0x9c,
    0xb5, 0x2e, 0xfb, 0x98, 0x65, 0x45, 0x7e, 0x7c,
    0x14, 0x21, 0xe3, 0x11, 0x29, 0x9b, 0xd5, 0x63,
    0xfd, 0x20, 0x3b, 0x02, 0x68, 0x35, 0xc2, 0xf2,
    0x38, 0xb2, 0x4e, 0xb6, 0x9e, 0xdd, 0x1b, 0x39,
    0x6a, 0x5d, 0xf7, 0x30, 0xca, 0x8a, 0xfc, 0xf8,
    0x28, 0x43, 0xc6, 0x22, 0x53, 0x37, 0xaa, 0xc7,
    0xfa, 0x40, 0x76, 0x04, 0xd0, 0x6b, 0x85, 0xe4,
    0x71, 0x64, 0x9d, 0x6d, 0x3d, 0xba, 0x36, 0x72,
    0xd4, 0xbb, 0xee, 0x61, 0x95, 0x15, 0xf9, 0xf0,
    0x50, 0x87, 0x8c, 0x44, 0xa6, 0x6f, 0x55, 0x8f,
    0xf4, 0x80, 0xec, 0x09, 0xa0, 0xd7, 0x0b, 0xc8,
    0xe2, 0xc9, 0x3a, 0xda, 0x7b, 0x74, 0x6c, 0xe5,
    0xa9, 0x77, 0xdc, 0xc3, 0x2a, 0x2b, 0xf3, 0xe0,
    0xa1, 0x0f, 0x18, 0x89, 0x4c, 0xde, 0xab, 0x1f,
    0xe9, 0x01, 0xd8, 0x13, 0x41, 0xae, 0x17, 0x91,
    0xc5, 0x92, 0x75, 0xb4, 0xf6, 0xe8, 0xd9, 0xcb,
    0x52, 0xef, 0xb9, 0x86, 0x54, 0x57, 0xe7, 0xc1,
    0x42, 0x1e, 0x31, 0x12, 0x99, 0xbd, 0x56, 0x3f,
    0xd2, 0x03, 0xb0, 0x26, 0x83, 0x5c, 0x2f, 0x23,
    0x8b, 0x24, 0xeb, 0x69, 0xed, 0xd1, 0xb3, 0x96,
    0xa5, 0xdf, 0x73, 0x0c, 0xa8, 0xaf, 0xcf, 0x82,
    0x84, 0x3c, 0x62, 0x25, 0x33, 0x7a, 0xac, 0x7f,
    0xa4, 0x07, 0x60, 0x4d, 0x06, 0xb8, 0x5e, 0x47,
    0x16, 0x49, 0xd6, 0xd3, 0xdb, 0xa3, 0x67, 0x2d,
    0x4b, 0xbe, 0xe6, 0x19, 0x51, 0x5f, 0x9f, 0x05,
    0x08, 0x78, 0xc4, 0x4a, 0x66, 0xf5, 0x58
    };
    for (long i=0;i<size/1024;i++){
        for(int j=0;j<1020;j++){
            buffer[i*1024+j+4] ^= pn[j % 255];
        }
    }
    cout<<"derandomization complete"<<endl;

}

void rsdecode(unsigned char* buffer, long size) {
	CReedSolomon rs;
	rs.init(8, 16, 112, 11, 0, 4, 4, 1);
    
    for (long i=0;i<size/1024;i++){//1024바이트씩(unsigned char는 1개에 1byte) 건너뛰며 decoding
        rs.Decode(buffer+i*1024);
    }
    cout<<"RS Decoding complete"<<endl;
}

vector<int> vecslice(vector<int> vec, int a, int b) { //vector slicing 하는 함수
    return vector<int>(vec.begin() + a, vec.begin() + b);
}

void vcid_classification(vector <unsigned char> &buffer_all, vector <unsigned char> &buffer_0,vector <unsigned char> &buffer_5){
    cout<<buffer_all.size()<<endl;
    unsigned char vcid;
    for(int i=0;i<buffer_all.size()/1024;i++){
        vcid=(buffer_all[i*1024+5]<<2);
        vcid=vcid>>2;
        if(vcid==0){//buffer_0 vector의 끝부분에 vcid=0인 부분 이어 붙이기
            buffer_0.insert(buffer_0.end(),buffer_all.begin()+i*1024+10,buffer_all.begin()+i*1024+896); //sync marker, vcdu primary header 제거
        }
        else if(vcid==5){
            buffer_5.insert(buffer_5.end(),buffer_all.begin()+i*1024+10,buffer_all.begin()+i*1024+896); //sync marker, vcdu primary header 제거
        }
    }
}




int main(){
    string cadu_path="cadu_img/lrit_img.cadu";

    int size;
	unsigned char* buffer = read_cadu(cadu_path,size);



    derandomization(buffer,size);
    
    rsdecode(buffer,size);

    vector<unsigned char> vec_buffer(buffer, buffer+size); // 내용 편집 쉽도록 array -> vector 변환

    vector<unsigned char> vec_vcid5;
    vector<unsigned char> vec_vcid0;
    

    vcid_classification(vec_buffer,vec_vcid0,vec_vcid5);

    unsigned char* a = &vec_vcid0[0];//vcid=0 인 경우 프린트 하기 위해 array로 다시 변환




    ofstream file("output.lrit");
	if(file.is_open()) {
		file.write((char *)a,size);
        file.close();
	}

/*
    cout<<(int)buffer[0] <<endl;
    cout<<(int)buffer[1]<<endl;
    cout<<(int)buffer[2]<<endl;
    cout<<(int)buffer[3]<<endl;
    cout<<(int)buffer[4]<<endl;
    cout<<(int)buffer[5]<<endl;
    cout<<(int)buffer[6]<<endl;
    cout<<(int)buffer[7]<<endl;
    cout<<size<<endl;
*/





    return 0;
}